//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tutorial
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class databasesettings : DbContext
    {
        public databasesettings()
            : base("name=databasesettings")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentCheck> StudentChecks { get; set; }
        public virtual DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public virtual DbSet<vw_GetEmployeeWithDept> vw_GetEmployeeWithDept { get; set; }
    
        public virtual ObjectResult<getEmployees_Result> getEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployees_Result>("getEmployees");
        }
    
        public virtual int getTotalEmployeeCount(string gender, ObjectParameter count)
        {
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getTotalEmployeeCount", genderParameter, count);
        }
    
        public virtual int spThrowError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spThrowError");
        }
    
        public virtual ObjectResult<Course> sp_GetCoursesOfStudentId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCoursesOfStudentId", idParameter);
        }
    
        public virtual ObjectResult<Course> sp_GetCoursesOfStudentId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("sp_GetCoursesOfStudentId", mergeOption, idParameter);
        }
    
        public virtual int sp_GetTotalStudentCourseByCount(string courseName, ObjectParameter count)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetTotalStudentCourseByCount", courseNameParameter, count);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_InsertStudent(Nullable<int> id, string name, string school)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var schoolParameter = school != null ?
                new ObjectParameter("school", school) :
                new ObjectParameter("school", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_InsertStudent", idParameter, nameParameter, schoolParameter);
        }
    
        public virtual int sp_AddTheStudent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTheStudent");
        }
    
        [DbFunction("databasesettings", "fn_GetStudentDetails")]
        public virtual IQueryable<fn_GetStudentDetails_Result> fn_GetStudentDetails(string courseName)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetStudentDetails_Result>("[databasesettings].[fn_GetStudentDetails](@courseName)", courseNameParameter);
        }
    
        [DbFunction("databasesettings", "fn_GetStudentDetailsMulti")]
        public virtual IQueryable<fn_GetStudentDetailsMulti_Result> fn_GetStudentDetailsMulti(string courseName)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetStudentDetailsMulti_Result>("[databasesettings].[fn_GetStudentDetailsMulti](@courseName)", courseNameParameter);
        }
    }
}
